package com.pplflw.prototype.services;

import com.pplflw.prototype.domains.Employee;
import com.pplflw.prototype.domains.EmployeeContract;
import com.pplflw.prototype.domains.Employer;
import com.pplflw.prototype.domains.enums.EmployeeStatus;
import com.pplflw.prototype.domains.enums.EmployeeStatusEvent;
import com.pplflw.prototype.exceptions.BusinessException;
import com.pplflw.prototype.repositories.EmployeesRepository;
import com.pplflw.prototype.repositories.EmployersRepository;
import org.junit.jupiter.api.Test;
import org.mockito.BDDMockito;
import org.mockito.stubbing.Answer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.test.context.EmbeddedKafka;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;

@SpringBootTest
@AutoConfigureMockMvc
@EmbeddedKafka(partitions = 1, brokerProperties = {"listeners=PLAINTEXT://localhost:9092", "port=9092"})
public class EmployeesServiceTest {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    public static final String USERNAME = "user";

    @MockBean
    private EmployeesRepository employeesRepository;

    @MockBean
    private EmployersRepository employersRepository;

    @MockBean
    private KafkaTemplate<String, Employee> employeeKafkaTemplate;

    @Autowired
    private EmployeesService employeesService;

    @Test
    public void addEmployee_ValidEmployeeWithoutContract_AddedSuccessfullyWithCorrectStatus() throws Exception {

        Employee requestedEmployee = new Employee("Ahmed", "Sayed");
        long dummyEmployeeId = 5L;

        BDDMockito.given(employeesRepository.save(any())).willAnswer((Answer<Employee>) invocation -> {
            Object[] args = invocation.getArguments();
            Employee dummyEmployee = (Employee) args[0];
            dummyEmployee.setId(dummyEmployeeId);
            dummyEmployee.setCreatedBy(USERNAME);
            return dummyEmployee;
        });
        
        Employee createdEmployee = employeesService.addEmployee(requestedEmployee);

        assertNotNull(createdEmployee.getId(), "Id should be generated by JPA and cannot be null");
        assertNotEquals(0l, createdEmployee.getId(), "Id should be generated by JPA and cannot be 0");
        assertEquals(EmployeeStatus.ADDED, createdEmployee.getStatus(), "New Employee Status must be `ADDED`");
    }
    
    @Test
    public void addEmployee_ValidEmployeeWithContract_AddedSuccessfullyWithCorrectStatus() throws Exception {

        long dummyEmployeeId = 5L;
        
        Employer dummyEmployer = new Employer(2l, "test", true);
        
        Employee requestedEmployee = new Employee("Ahmed", "Sayed");
        requestedEmployee.setContracts(new ArrayList<>());
        EmployeeContract dummyContract = new EmployeeContract(null, null, BigDecimal.TEN,
                true, requestedEmployee, dummyEmployer);
        requestedEmployee.getContracts().add(dummyContract);
        
        BDDMockito.given(employersRepository.findById(anyLong())).willReturn(Optional.of(dummyEmployer));

        BDDMockito.given(employeesRepository.save(any())).willAnswer((Answer<Employee>) invocation -> {
            Object[] args = invocation.getArguments();
            Employee dummyEmployee = (Employee) args[0];
            dummyEmployee.setId(dummyEmployeeId);
            dummyEmployee.setCreatedBy(USERNAME);
            return dummyEmployee;
        });
        
        Employee createdEmployee = employeesService.addEmployee(requestedEmployee);

        assertNotNull(createdEmployee.getId(), "Id should be generated by JPA and cannot be null");
        assertNotEquals(0L, createdEmployee.getId(), "Id should be generated by JPA and cannot be 0");
        assertEquals(EmployeeStatus.ADDED, createdEmployee.getStatus(), "New Employee Status must be `ADDED`");
    }

    @Test
    public void addEmployee_InvalidEmployeeWithMultipleContracts_ThrowsException() throws Exception {

        Employee requestedEmployee = new Employee("Ahmed", "Sayed");
        requestedEmployee.setContracts(new ArrayList<>());
        EmployeeContract dummyContract = new EmployeeContract(null, null, BigDecimal.TEN,
                true, requestedEmployee, new Employer(2l, "test", true));
        requestedEmployee.getContracts().add(dummyContract);
        requestedEmployee.getContracts().add(dummyContract);

        BusinessException thrown = assertThrows(
                BusinessException.class,
                () -> employeesService.addEmployee(requestedEmployee),
                "Expected addEmployee() to throw BusinessException but it didn't"
        );

        assertTrue(thrown.getMessage().equals("New Employee cannot have more than one contract."));
    }
    
    @Test
    public void addEmployee_InvalidEmployeeWithWrongEmployer_ThrowsException() throws Exception {

        Employee requestedEmployee = new Employee("Ahmed", "Sayed");
        requestedEmployee.setContracts(new ArrayList<>());
        EmployeeContract dummyContract = new EmployeeContract(null, null, BigDecimal.TEN,
                true, requestedEmployee, new Employer(2l, "test", true));
        requestedEmployee.getContracts().add(dummyContract);
        
        BDDMockito.given(employersRepository.findById(anyLong())).willReturn(Optional.empty());
        
        BusinessException thrown = assertThrows(
                BusinessException.class,
                () -> employeesService.addEmployee(requestedEmployee),
                "Expected addEmployee() to throw BusinessException but it didn't"
        );

        assertTrue(thrown.getMessage().equals("Invalid Contract's Employer."));
    }

    @Test
    public void updateEmployeeStatus_ValidEmployeeIdAndValidTransition_StatusUpdatedSuccessfully() throws Exception {

        long requestedEmployeeId = 50L;
        EmployeeStatusEvent requestedEvent = EmployeeStatusEvent.START_CHECK;

        Employee fetchedEmployee = new Employee("Ahmed", "Sayed");
        fetchedEmployee.setId(requestedEmployeeId);
        fetchedEmployee.setStatus(EmployeeStatus.ADDED);
        fetchedEmployee.setId(requestedEmployeeId);

        BDDMockito.given(employeesRepository.findById(requestedEmployeeId)).willReturn(Optional.of(fetchedEmployee));
        BDDMockito.given(employeesRepository.save(any())).willReturn(fetchedEmployee);

        Employee updatedEmployee = employeesService.updateEmployeeStatus(requestedEmployeeId, requestedEvent);
        
        assertTrue(EmployeeStatus.IN_CHECK.equals(updatedEmployee.getStatus()));
    }
    
    @Test
    public void updateEmployeeStatus_ValidEmployeeIdAndInvalidTransition_ThrowException() throws Exception {

        long requestedEmployeeId = 50L;
        EmployeeStatusEvent requestedEvent = EmployeeStatusEvent.ACTIVATE;

        Employee fetchedEmployee = new Employee("Ahmed", "Sayed");
        fetchedEmployee.setId(requestedEmployeeId);
        fetchedEmployee.setStatus(EmployeeStatus.IN_CHECK);
        fetchedEmployee.setId(requestedEmployeeId);

        BDDMockito.given(employeesRepository.findById(requestedEmployeeId)).willReturn(Optional.of(fetchedEmployee));
        
        BusinessException thrown = assertThrows(
                BusinessException.class,
                () -> employeesService.updateEmployeeStatus(requestedEmployeeId, requestedEvent),
                "Expected updateEmployeeStatus() to throw BusinessException but it didn't"
        );
        
        assertEquals("This transition isn't allowed.", thrown.getMessage());
    }
}
